name:                   array-memoize
version:                0.5.0
synopsis:               Memoization combinators for finite subsets of function domains using arrays

description:            Memoization combinators are great for providing high-performance Haskell programs,
			but they can be even faster if memoization is performed on a finite, discrete domain
			as an array can then be used.
			.
			This package provides various combinators for doing just this, including also 
			combinators for quanitzing and discretizing Float/Double-valued functions.
			.
			Example:
			.
			@
			  fibA :: Int -> Int
			  fibA 0 = 1
			  fibA 1 = 1
			  fibA n = fibB (n - 1) + fibB (n - 2)

			  fibB = arrayMemo (0, 1000) fibA 
			@

license:                BSD3
license-file:           LICENSE
category:               Syntax,
copyright:              Dominic Orchard, 2014
author:                 Dominic Orchard
maintainer:             Dominic Orchard
stability:              experimental
build-type:             Simple
cabal-version:          >= 1.6
tested-with:            GHC >= 7.6

extra-source-files:     example.hs

source-repository head
  type: git
  location: https://github.com/dorchard/array-memoize


library
  hs-source-dirs:       .

  exposed-modules:      Data.Function.ArrayMemoize
                        
  build-depends:        base < 5,
                        array >= 0.4